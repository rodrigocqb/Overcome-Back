generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(255)
  name      String     @db.VarChar(255)
  password  String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Journal   Journal[]
  Objective Objective?
  Session   Session[]
  Sheet     Sheet[]
  Workout   Workout[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Objective {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  title         String?
  currentWeight Int
  goalWeight    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User     @relation(fields: [userId], references: [id])
}

model Exercise {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  SheetExercise SheetExercise[]

  @@index([name])
}

model Sheet {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  userId        Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User            @relation(fields: [userId], references: [id])
  SheetExercise SheetExercise[]
  Workout       Workout[]
}

model SheetExercise {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  sheetId    Int
  weight     Int      @default(0)
  reps       Int
  sets       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  Sheet      Sheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)
}

model Workout {
  id        Int      @id @default(autoincrement())
  userId    Int
  sheetId   Int?
  cardio    Cardio?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Sheet     Sheet?   @relation(fields: [sheetId], references: [id], onDelete: Cascade)
}

enum Cardio {
  RUNNING
  CYCLING
  SWIMMING
}

model Journal {
  id        Int      @id @default(autoincrement())
  userId    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
